#include<iostream>
#include<algorithm>
using namespace std;

int binary_search_tree(int arr[], int key, int size) {
	int front, rear, pivot;
	front = 0;
	rear = size - 1;

	while (1) {
		pivot = (front + rear) / 2;
		if (arr[pivot] == key) return 1;
		if (arr[front] == key) return 1;
		if (arr[rear] == key) return 1;

		if (arr[pivot] < key)
			front = pivot + 1;
		else
			rear = pivot - 1;

		if (front >= rear)
			return 0;
	}
}

int compare(const void* a, const void* b)
{
	const int* x = (int*)a;
	const int* y = (int*)b;

	if (*x > *y)
		return 1;
	else if (*x < *y)
		return -1;

	return 0;
}

int main() {
	int n;
	int m;
	int ch = 0;

	int n_numbers[100000];
	int m_numbers[100000];

	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> n_numbers[i];
	}
	qsort(n_numbers, n, sizeof(int), compare);

	cin >> m;
	for (int i = 0; i < m; i++) {
		cin >> m_numbers[i];
	}

	for (int i = 0; i < m; i++) {
		printf("%d\n", binary_search_tree(n_numbers, m_numbers[i], n));
	}


	return 0;

}
